version: '3.7'

services:
  api:
    container_name: api
    build:
      context: .
      target: base
      args:
        DJANGO_ENV: development
    command: ["python", "-Wd", "manage.py", "runserver", "0.0.0.0:8000"]
    ports:
      - "8000:8000"
    environment:
      - DJANGO_SETTINGS_MODULE=career_skill_atlas.settings
    volumes:
      - "./:/usr/src/app"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy

  db:
    image: postgres:12.0-alpine
    container_name: db
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    env_file:
      - .env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} || exit 1" ]
      interval: 5s
      timeout: 3s
      retries: 3

  db-initializer:
    container_name: db_initializer
    build:
      context: .
      dockerfile: Dockerfile
    links:
      - db
    depends_on:
      db:
        condition: service_healthy
    environment:
      ALLOWED_HOSTS: "*"
      DB_NAME: ${POSTGRES_DB}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
    volumes:
      - "./:/usr/src/app"
    command: [ "python", "manage.py", "migrate" ]

volumes:
  postgres_data:
